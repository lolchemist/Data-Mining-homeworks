{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Домашнее задание 1. Сбор данных"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "При решении реальных задач мы почти никогда не имеем дело с \"хорошими\" исходными данными, уже подготовленными для обработки и анализа. Как правило на входе имеются неструкткрированные данные в \"грязном\" виде, например необработанные тексты, изображения или аудио файлы. Иногда нет даже этого, и данные приходится собирать из разных доступных источников: разнообразных баз данных, внешних сервисов и даже электронных таблиц. После того, как данные получены, их унифицируют, очищают от шума, преобразовывают в нужный вид и сохраняют для дальнейшего анализа. В одном из традиционных подходов к [Data Mining](http://www.wikiwand.com/en/Online_analytical_processing) этот процесс называется Extract-Transform-Load ([ETL](http://www.wikiwand.com/en/Extract,_transform,_load)).\n",
    "\n",
    "Цель этого задания собрать первые данные о пользователях из обучающей выборки и провести простейший качественный анализ. В ходе решения будут использованы:\n",
    "1. [numpy](http://www.numpy.org/) -- библиотека для работы с многомерными массивами\n",
    "2. [pandas](http://pandas.pydata.org/) -- библиотека, позволяющая удобно работать с различными типами данных\n",
    "3. [requests](http://docs.python-requests.org/en/latest/) -- библиотека, которую можно использовать для вызова HTTP запросов\n",
    "4. [python-twitter](https://github.com/bear/python-twitter/tree/master/twitter) -- обертка для Twitter API\n",
    "5. [matplotlib](http://matplotlib.org/) -- библиотека для рисования графиков в python\n",
    "\n",
    "Первым делом импортируем необходимые библиотеки и убеждаемся, что все установлено."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Populating the interactive namespace from numpy and matplotlib\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import scipy as sp\n",
    "import pylab as pl\n",
    "import mpl_toolkits.basemap as bm\n",
    "import twitter\n",
    "import requests\n",
    "import datetime\n",
    "import dateutil\n",
    "import csv\n",
    "import os\n",
    "import json\n",
    "import dateutil.parser\n",
    "\n",
    "# Plotting config\n",
    "%pylab inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Чтение исходных данных из файла"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Считываем исходные данные из файла в data frame библиотеки pandas. Полученный data frame должен иметь целочисленный ключ и две колонки:\n",
    "1. uid -- идентификатор пользователя\n",
    "2. cat -- числовой номер класса"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>uid</th>\n",
       "      <th>cat</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>40585382</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>30005269</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3314758074</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>14311688</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>110457801</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          uid  cat\n",
       "0    40585382    1\n",
       "1    30005269    0\n",
       "2  3314758074    0\n",
       "3    14311688    0\n",
       "4   110457801    0"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TRAINING_SET_URL = \"twitter_train.txt\"\n",
    "EXAMPLE_SET_URL = \"twitter_example.txt\"\n",
    "df_users_train = pd.read_csv(TRAINING_SET_URL, sep=\",\", header=0, names=[\"uid\", \"cat\"])\n",
    "df_users_ex = pd.read_csv(EXAMPLE_SET_URL, sep=\",\", header=0, names=[\"uid\", \"cat\"])\n",
    "df_users_ex['cat'] = None\n",
    "df_users = pd.concat([df_users_train, df_users_ex])\n",
    "df_users.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Построим распределение целевой переменной. Требуется получить [barchart](http://www.wikiwand.com/en/Bar_chart), в котором высота столбика, соответствующего каждому из классов, пропорциональна количеству пользователей этого класса. По горизонтальной оси отложены классы (positive, negative), а по вертикальной -- количество пользователей."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1157a9bd0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Compute the distribution of the target variable\n",
    "counts, bins = np.histogram(df_users_train[\"cat\"], bins=[0,1,2])\n",
    "\n",
    "# Plot the distribution\n",
    "pl.figure(figsize=(6,6))\n",
    "pl.bar(bins[:-1], counts, width=0.5, alpha=0.4)\n",
    "pl.xticks(bins[:-1] + 0.3, [\"negative\", \"positive\"])\n",
    "pl.xlim(bins[0] - 0.5, bins[-1])\n",
    "pl.ylabel(\"Number of users\")\n",
    "pl.title(\"Target variable distribution\")\n",
    "pl.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Сбор данных"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Для того чтобы разработать модель, которая предсказывает значение целевой переменной для произвольного пользователя, недостаточно знать только значения идентификаторов пользоватей. Причина в том, что _user_id_ для пользователя никак не зависит от целевой переменной -- идентификатор генерируется на основании времени регистрации, сервера, обрабатывающего запрос, и номера пользователя ([подробности](https://dev.twitter.com/overview/api/twitter-ids-json-and-snowflake)).\n",
    "\n",
    "Поэтому нам потребуется загрузить дополнительную информацию о каждом пользователе, иначе говоря провести сбор данных (data collection). Наиболее важную информацию можно загрузить из [Twitter](https://dev.twitter.com/rest/public) [API](http://www.wikiwand.com/en/Representational_state_transfer). При желании можно воспользоваться и другими источниками -- об этом ниже.\n",
    "\n",
    "Для того, чтобы получить доступ к API прежде всего необходимо зарегистрироваться в Twitter в качестве разработчика и создать свое [приложение](https://apps.twitter.com/). После создания приложения будет доступен набор ключей, которые мы будем использовать для аутентификации. Эти ключи необходимо скопировать в соответствующие константы ниже. Подробнее о том, как работает аутентификация в Twitter API можно почитать [по ссылке](https://dev.twitter.com/oauth/application-only), хотя это нужно скорее для ознакомления: библиотека обращения с API позаботится о механизме аутентификации за нас."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "CONSUMER_KEY = \"t7TY8m7W1PELmEQdD7ai4hnlj\"\n",
    "CONSUMER_SECRET = \"TrYFvzvblOaAy9NzEUIwJR4FiIUYjRqigNoNxnSeCQP6ulBX3r\"\n",
    "\n",
    "ACCESS_TOKEN_KEY = \"703950096111693824-WXiMMetnK8kataCmP9vXSUYd1sYtQy3\"\n",
    "ACCESS_TOKEN_SECRET = \"r0jqDByKuLs9H0cGY0vJvQwYtzpKr49PHd767VFEjRTey\"\n",
    "\n",
    "api = twitter.Api (consumer_key=CONSUMER_KEY, \n",
    "                  consumer_secret=CONSUMER_SECRET, \n",
    "                  access_token_key=ACCESS_TOKEN_KEY, \n",
    "                  access_token_secret=ACCESS_TOKEN_SECRET)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Twitter API предоставляет информацию о местонахождении пользователя, но эта информация представлена в текстовом виде, например так:\n",
    "```\n",
    "\"location\": \"San Francisco, CA\"\n",
    "```\n",
    "Такие текстовый описания не слишком удобны для анализа, поэтому наша цель -- получить более структурированную информацию, такую как географические координаты, страна, город и т.д. Для этого удобно использовать геоинформационный сервис, например [GeoNames](http://www.geonames.org/export/web-services.html). Для его использования также необходимо зарегистрироваться, подтвердить регистрацию и включить поддержку API. После этого можно будет посылать запросы для нахождения нужной информации. Например на запрос\n",
    "```\n",
    "http://api.geonames.org/search?q=\"San Francisco, CA\"&maxRows=10&username=demo\n",
    "```\n",
    "возвращается результат,\n",
    "```javascript\n",
    "{\n",
    "    \"totalResultsCount\": 2112,\n",
    "    \"geonames\": [\n",
    "        {\n",
    "            \"countryId\": \"6252001\",\n",
    "            \"adminCode1\": \"CA\",\n",
    "            \"countryName\": \"United States\",\n",
    "            \"fclName\": \"city, village,...\",\n",
    "            \"countryCode\": \"US\",\n",
    "            \"lng\": \"-122.41942\",\n",
    "            \"fcodeName\": \"seat of a second-order administrative division\",\n",
    "            \"toponymName\": \"San Francisco\",\n",
    "            \"fcl\": \"P\",\n",
    "            \"name\": \"San Francisco\",\n",
    "            \"fcode\": \"PPLA2\",\n",
    "            \"geonameId\": 5391959,\n",
    "            \"lat\": \"37.77493\",\n",
    "            \"adminName1\": \"California\",\n",
    "            \"population\": 805235\n",
    "        },\n",
    "        {\n",
    "            \"countryId\": \"6252001\",\n",
    "            \"adminCode1\": \"CA\",\n",
    "            \"countryName\": \"United States\",\n",
    "            \"fclName\": \"spot, building, farm\",\n",
    "            \"countryCode\": \"US\",\n",
    "            \"lng\": \"-122.3758\",\n",
    "            \"fcodeName\": \"airport\",\n",
    "            \"toponymName\": \"San Francisco International Airport\",\n",
    "            \"fcl\": \"S\",\n",
    "            \"name\": \"San Francisco International Airport\",\n",
    "            \"fcode\": \"AIRP\",\n",
    "            \"geonameId\": 5391989,\n",
    "            \"lat\": \"37.61882\",\n",
    "            \"adminName1\": \"California\",\n",
    "            \"population\": 0\n",
    "        }\n",
    "    ]\n",
    "}\n",
    "```\n",
    "из которого легко извлечь нужную информацию.\n",
    "\n",
    "**Замечание: для запросов необходимо использовать своего пользователя, кроме того количество запросов ограничего 30к в день**.\n",
    "\n",
    "Первым делом нам понадобится функция, которая возвращает информацию о местоположении для данного текстового запроса. Требуется реализовать функцию get_coordinates_by_location, принимающую на вход строку с местоположением и возвращает кортеж вида (долгота, широта, город)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "GEO_USER_NAMES = [\"Nataliia717\", \"nataliia716\", \"nataliia715\", \"nataliia714\", \"nataliia713\", \"xitay\"]\n",
    "count_username = len(GEO_USER_NAMES) - 1\n",
    "def get_coordinates_by_location(location):    \n",
    "    global count_username\n",
    "    count_username = (count_username + 1) % len(GEO_USER_NAMES)\n",
    "    r = requests.get(\"http://api.geonames.org/searchJSON\", params={\n",
    "        'q': location,\n",
    "        'maxRows': 1,\n",
    "        'username': GEO_USER_NAMES[count_username]\n",
    "    })\n",
    "    data = json.loads(r.text)\n",
    "    if 'geonames' in data:\n",
    "        data = data['geonames']\n",
    "        if len(data) != 0:\n",
    "            data = data[0]\n",
    "            return (\n",
    "                float(data['lat']), float(data['lng']), data['name']\n",
    "            )\n",
    "        else:\n",
    "            return None, None, None\n",
    "    else:\n",
    "        print r.text\n",
    "        return None, None, None"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Следующий шаг -- вызов Twitter API для сбора данных и сохранения их в data frame. После чего data frame c собранными данными совмещается с data frame, содержащим данные исходной обучающей выборки. \n",
    "\n",
    "В этой части задания нужно реализовать функцию `get_user_records`, которая принимает на вход прочитанный из файла `data frame` и возвращает список словарей, каждый из которых представляет данные одного пользователя. Для того, чтобы получить из объекта класса [`User`](https://github.com/bear/python-twitter/blob/master/twitter/user.py) словарь в правильном формате, нужно использовать функцию `twitter_user_to_dataframe_record` (4 балла).\n",
    "\n",
    "Так как скрипт работает существенное время, будем сохранять промежуточный результат."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "ts_parser = lambda date_str: dateutil.parser.parse(date_str) if pd.notnull(date_str) else None\n",
    "\n",
    "user_records = []\n",
    "tmp_file_name = 'tmp_user_records'\n",
    "if os.path.exists(tmp_file_name):\n",
    "    with open(tmp_file_name) as f:\n",
    "        for line in f:\n",
    "            try:\n",
    "                user_records.append(json.loads(line))\n",
    "            except:\n",
    "                continue\n",
    "\n",
    "processed_users = set()\n",
    "for r in user_records:\n",
    "    processed_users.add(r['uid'])\n",
    "    \n",
    "f = open(tmp_file_name, 'a')\n",
    "            \n",
    "def twitter_user_to_dataframe_record(user):\n",
    "    dt = ts_parser(user.created_at)\n",
    "    record = {\n",
    "        \"uid\": user.id,\n",
    "        \"name\": user.name,\n",
    "        \"screen_name\": user.screen_name,        \n",
    "        \"created_at\": dt.strftime(\"%Y-%m\") if dt else dt,        \n",
    "        \"followers_count\": user.followers_count,\n",
    "        \"friends_count\": user.friends_count,\n",
    "        \"statuses_count\": user.statuses_count,\n",
    "        \"favourites_count\": user.favourites_count,\n",
    "        \"listed_count\": user.listed_count,\n",
    "        \"verified\": user.verified\n",
    "    }\n",
    "    \n",
    "    if user.description is not None and user.description.strip() != \"\":\n",
    "        record[\"description\"] = user.description\n",
    "        \n",
    "    if user.location is not None and user.location.strip() != \"\":\n",
    "        record[\"location\"] = user.location\n",
    "        record[\"lat\"], record[\"lon\"], record[\"country\"] = get_coordinates_by_location(user.location)\n",
    "    \n",
    "    return record\n",
    "\n",
    "def get_user_records(df):\n",
    "\n",
    "    user_list = []\n",
    "\n",
    "    for n in range(0, len(df), 100):\n",
    "        ids = df[\"uid\"].values[n:n+100].tolist()\n",
    "\n",
    "        successful = False\n",
    "        while not successful:\n",
    "            try:\n",
    "                query = api.UsersLookup(user_id=ids)\n",
    "                for user in query:\n",
    "                    user_list.append(twitter_user_to_dataframe_record(user))\n",
    "                successful = True\n",
    "                print \"Downloaded \" + str(len(user_list)) + \"/\" + str(len(df.values))\n",
    "            except twitter.TwitterError, err:\n",
    "                if err[0][0][\"code\"] == 88:\n",
    "                    print \"Sleeping for 15 minutes to regain API limit\"\n",
    "                    time.sleep(60)\n",
    "                    for i in range(14, 0, -1):\n",
    "                        print str(i) + \" minutes left\"\n",
    "                        time.sleep(60)\n",
    "                else:\n",
    "                    successful = True\n",
    "\n",
    "    print \"Download ended\"\n",
    "    return user_list\n",
    "user_records = get_user_records(df_users)\n",
    "  \n",
    "        \n",
    "print \"Creating data frame from loaded data\"\n",
    "df_records = pd.DataFrame(user_records, columns=[\"uid\", \"name\", \"screen_name\", \"description\", \"verified\", \"location\", \"lat\", \"lon\", \"country\", \"created_at\", \"followers_count\", \"friends_count\", \"statuses_count\", \"favourites_count\", \"listed_count\"])\n",
    "print \"Merging data frame with the training set\"\n",
    "df_full = pd.merge(df_users, df_records, on=\"uid\", how=\"left\")\n",
    "print \"Finished building data frame\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exploratory Data Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Для того, чтобы лучше понять, как устроена наша обучающая выборка, построим несколько графиков. Сначала построим долю \"положительных\" пользователей в зависимости от дня создания аккаунта. По горизонтальной оси отложим день создания аккаунта, а по вертикальной -- долю \"положительных\" пользователей ([подсказка](http://anokhin.github.io/img/hw1_distr.png)). Необходимо дописать код функции count_users. В функции необходимо посчитать пользователей в каждой группе (2 балла)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def count_users(grouped):\n",
    "    \"\"\"\n",
    "    Counts number of positive and negative users\n",
    "    created at each date.\n",
    "    \n",
    "    Returns:\n",
    "        count_pos -- 1D numpy array with the counts of positive users created at each date\n",
    "        count_neg -- 1D numpy array with the counts of negative users created at each date\n",
    "        dts -- a list of date strings, e.g. ['2014-10', '2014-11', ...]\n",
    "    \"\"\"\n",
    "    dts = []\n",
    "    i = 0\n",
    "    count_pos, count_neg = np.zeros(len(grouped)), np.zeros(len(grouped))\n",
    "    for name, group in grouped:\n",
    "        dts.append(name)\n",
    "        neg = 0\n",
    "        pos = 0\n",
    "        for item in group['cat']:\n",
    "            if item == 0.0:\n",
    "                neg+=1\n",
    "            if item == 1.0:\n",
    "                pos+=1\n",
    "        #print len(group)\n",
    "        #print pos\n",
    "        #print neg\n",
    "        count_pos[i]+=pos\n",
    "        count_neg[i]+=neg\n",
    "        i+=1\n",
    "        \n",
    "    return count_pos, count_neg, dts\n",
    "\n",
    "\n",
    "grouped = df_full.groupby(map(lambda dt: dt if pd.notnull(dt) else \"NA\", df_full[\"created_at\"]))\n",
    "#difgrouped = df_full.groupby([map(lambda dt: dt if pd.notnull(dt) else \"NA\", df_full[\"created_at\"]),(df_full[\"cat\"])])\n",
    "#print difgrouped.size()\n",
    "count_pos, count_neg, dts = count_users(grouped)\n",
    "    \n",
    "fraction_pos = count_pos / (count_pos + count_neg + 1e-10)\n",
    "fraction_neg = 1 - fraction_pos\n",
    "\n",
    "sort_ind = np.argsort(dts)\n",
    "    \n",
    "pl.figure(figsize=(20, 3))\n",
    "pl.bar(np.arange(len(dts)), fraction_pos[sort_ind], width=1.0, color='red', alpha=0.6, linewidth=0, label=\"Positive\")\n",
    "pl.bar(np.arange(len(dts)), fraction_neg[sort_ind], bottom=fraction_pos[sort_ind], width=1.0, color='green', alpha=0.6, linewidth=0, label=\"Negative\")\n",
    "pl.xticks(np.arange(len(dts)) + 0.4, sorted(dts), rotation=90)\n",
    "pl.title(\"Class distribution by account creation month\")\n",
    "pl.xlim(0, len(dts))\n",
    "pl.legend()\n",
    "pl.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Видно, что доля \"положительных\" аккаунтов в выборке растет с увеличением времени. Посмотрим, где живут пользователи положительной и отрицательной категории. Для этого отметим на карте каждого положительного пользователя красным, а отрицательного -- зеленым цветом ([подсказка](http://anokhin.github.io/img/hw1_map.png)). Необходимо реализовать функцию plot_points_on_map. В функции необходимо отобразить на карте пользователей из разных классов (2 балла)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "pl.figure(figsize=(20,12))\n",
    "\n",
    "m = bm.Basemap(projection='cyl', llcrnrlat=-90, urcrnrlat=90, llcrnrlon=-180, urcrnrlon=180, resolution='c')\n",
    "\n",
    "m.drawcountries(linewidth=0.2)\n",
    "m.fillcontinents(color='lavender', lake_color='#000040')\n",
    "m.drawmapboundary(linewidth=0.2, fill_color='#000040')\n",
    "m.drawparallels(np.arange(-90,90,30),labels=[0,0,0,0], color='white', linewidth=0.5)\n",
    "m.drawmeridians(np.arange(0,360,30),labels=[0,0,0,0], color='white', linewidth=0.5)\n",
    "\n",
    "def plot_points_on_map(df_full):\n",
    "    \"\"\"\n",
    "    Plot points on the map. Be creative.\n",
    "    \"\"\"\n",
    "    # your code here\n",
    "    lenth = len(df_full)\n",
    "    df_cat = df_full.cat\n",
    "    df_lon = df_full.lon\n",
    "    df_lat = df_full.lat\n",
    "    xpt, ypt= m(df_lon,df_lat)\n",
    "    for i in range(lenth):\n",
    "        if (~sp.isnan(xpt[i])) and (~sp.isnan(ypt[i])):\n",
    "            if df_cat[i] == 1.0:\n",
    "                m.plot(xpt[i],ypt[i],'ro')\n",
    "            elif df_cat[i] == 0.0:\n",
    "                m.plot(xpt[i],ypt[i],'go')\n",
    "    return\n",
    "\n",
    "plot_points_on_map(df_full)\n",
    "\n",
    "pl.title(\"Geospatial distribution of twitter users\")\n",
    "pl.legend()\n",
    "pl.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В последней картинке есть проблема: сервис геоинформации определяет координаты с точностью до города, поэтому точки, соответствующте нескольким пользователям, могут накладываться. Предложите и реализуйте способ, позволяющий справиться с этой проблемой (2 балла).\n",
    "\n",
    "Смотрим на полученный data frame и сохраняем его в .csv файл."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В поле ниже необходимо словами описать, как было улучшено изображение (описание необходимо для корректной проверки задания)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "На изображении сделаны следующие улучшения:\n",
    "* ...\n",
    "* ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving output data frame to hw1_out.csv\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>uid</th>\n",
       "      <th>cat</th>\n",
       "      <th>name</th>\n",
       "      <th>screen_name</th>\n",
       "      <th>description</th>\n",
       "      <th>verified</th>\n",
       "      <th>location</th>\n",
       "      <th>lat</th>\n",
       "      <th>lon</th>\n",
       "      <th>country</th>\n",
       "      <th>created_at</th>\n",
       "      <th>followers_count</th>\n",
       "      <th>friends_count</th>\n",
       "      <th>statuses_count</th>\n",
       "      <th>favourites_count</th>\n",
       "      <th>listed_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>40585382</td>\n",
       "      <td>1</td>\n",
       "      <td>Reverend Sue</td>\n",
       "      <td>ReverendSue</td>\n",
       "      <td>Retired Interfaith Minister. Activist. Equalit...</td>\n",
       "      <td>False</td>\n",
       "      <td>United States</td>\n",
       "      <td>39.76000</td>\n",
       "      <td>-98.50000</td>\n",
       "      <td>United States</td>\n",
       "      <td>2009-05</td>\n",
       "      <td>7614</td>\n",
       "      <td>4284</td>\n",
       "      <td>50614</td>\n",
       "      <td>787</td>\n",
       "      <td>417</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>30005269</td>\n",
       "      <td>0</td>\n",
       "      <td>Ryan Wrasse</td>\n",
       "      <td>RWrasse</td>\n",
       "      <td>Communications Director for @SenJohnThune | Ge...</td>\n",
       "      <td>False</td>\n",
       "      <td>Capitol Hill</td>\n",
       "      <td>15.20825</td>\n",
       "      <td>145.75313</td>\n",
       "      <td>Capitol Hill Village</td>\n",
       "      <td>2009-04</td>\n",
       "      <td>1914</td>\n",
       "      <td>1240</td>\n",
       "      <td>7149</td>\n",
       "      <td>127</td>\n",
       "      <td>96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3314758074</td>\n",
       "      <td>0</td>\n",
       "      <td>Campaign Trump</td>\n",
       "      <td>Campaign_Trump</td>\n",
       "      <td>#TrumpMovement for President. Indp. Local &amp; In...</td>\n",
       "      <td>False</td>\n",
       "      <td>Florida, USA</td>\n",
       "      <td>28.75054</td>\n",
       "      <td>-82.50010</td>\n",
       "      <td>Florida</td>\n",
       "      <td>2015-08</td>\n",
       "      <td>20005</td>\n",
       "      <td>12804</td>\n",
       "      <td>1345</td>\n",
       "      <td>7265</td>\n",
       "      <td>174</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>14311688</td>\n",
       "      <td>0</td>\n",
       "      <td>Bernard Whitman</td>\n",
       "      <td>BernardWhitman</td>\n",
       "      <td>Democratic strategist, pollster, and corporate...</td>\n",
       "      <td>False</td>\n",
       "      <td>New York</td>\n",
       "      <td>40.71427</td>\n",
       "      <td>-74.00597</td>\n",
       "      <td>New York</td>\n",
       "      <td>2008-04</td>\n",
       "      <td>1755</td>\n",
       "      <td>1292</td>\n",
       "      <td>7346</td>\n",
       "      <td>157</td>\n",
       "      <td>110</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>110457801</td>\n",
       "      <td>0</td>\n",
       "      <td>Carson Ingle</td>\n",
       "      <td>caingle</td>\n",
       "      <td>Writer for @AthleteSpeakers &amp; @NOPACTalent. 10...</td>\n",
       "      <td>False</td>\n",
       "      <td>Orlando aka The City Beautiful</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "      <td>2010-02</td>\n",
       "      <td>1473</td>\n",
       "      <td>1188</td>\n",
       "      <td>37154</td>\n",
       "      <td>3313</td>\n",
       "      <td>76</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          uid  cat             name     screen_name  \\\n",
       "0    40585382    1     Reverend Sue     ReverendSue   \n",
       "1    30005269    0      Ryan Wrasse         RWrasse   \n",
       "2  3314758074    0   Campaign Trump  Campaign_Trump   \n",
       "3    14311688    0  Bernard Whitman  BernardWhitman   \n",
       "4   110457801    0     Carson Ingle         caingle   \n",
       "\n",
       "                                         description verified  \\\n",
       "0  Retired Interfaith Minister. Activist. Equalit...    False   \n",
       "1  Communications Director for @SenJohnThune | Ge...    False   \n",
       "2  #TrumpMovement for President. Indp. Local & In...    False   \n",
       "3  Democratic strategist, pollster, and corporate...    False   \n",
       "4  Writer for @AthleteSpeakers & @NOPACTalent. 10...    False   \n",
       "\n",
       "                         location       lat        lon               country  \\\n",
       "0                   United States  39.76000  -98.50000         United States   \n",
       "1                    Capitol Hill  15.20825  145.75313  Capitol Hill Village   \n",
       "2                    Florida, USA  28.75054  -82.50010               Florida   \n",
       "3                        New York  40.71427  -74.00597              New York   \n",
       "4  Orlando aka The City Beautiful       NaN        NaN                  None   \n",
       "\n",
       "  created_at  followers_count  friends_count  statuses_count  \\\n",
       "0    2009-05             7614           4284           50614   \n",
       "1    2009-04             1914           1240            7149   \n",
       "2    2015-08            20005          12804            1345   \n",
       "3    2008-04             1755           1292            7346   \n",
       "4    2010-02             1473           1188           37154   \n",
       "\n",
       "   favourites_count  listed_count  \n",
       "0               787           417  \n",
       "1               127            96  \n",
       "2              7265           174  \n",
       "3               157           110  \n",
       "4              3313            76  "
      ]
     },
     "execution_count": 191,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "OUT_FILE_PATH = \"hw1_out.csv\"\n",
    "print \"Saving output data frame to %s\" % OUT_FILE_PATH\n",
    "df_full.to_csv(OUT_FILE_PATH, sep=\"\\t\", index=False, encoding=\"utf-8\", quoting=csv.QUOTE_NONNUMERIC)\n",
    "df_full.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
